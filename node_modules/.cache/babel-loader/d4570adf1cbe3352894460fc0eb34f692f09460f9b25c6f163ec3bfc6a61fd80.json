{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  getUserInfo() {\n    return fetch(this._baseUrl + '/users/me', {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  getInitialCards() {\n    return fetch(this._baseUrl + '/cards', {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  setUserInfoApi(_ref) {\n    let {\n      name,\n      about\n    } = _ref;\n    return fetch(this._baseUrl + '/users/me', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(this._checkResponse);\n  }\n  addUserCard(data) {\n    return fetch(this._baseUrl + '/cards', {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(this._checkResponse);\n  }\n  deleteCard(id) {\n    return fetch(this._baseUrl + `/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  changeUserAvatar(data) {\n    return fetch(this._baseUrl + `/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.userAvatar\n      })\n    }).then(this._checkResponse);\n  }\n\n  // addLike(id) {\n  //   return fetch(this._baseUrl + `/cards/${id}/likes`, {\n  //     method: 'PUT',\n  //     headers: this._headers\n  //   })\n  //   .then(this._checkResponse)\n  // }\n\n  // deleteLike(id) {\n  //   return fetch(this._baseUrl + `/cards/${id}/likes`, {\n  //     method: 'DELETE',\n  //     headers: this._headers\n  //   })\n  //   .then(this._checkResponse)\n  // }\n\n  changeLikeCardStatus(id, isLiked) {\n    return fetch(this._baseUrl + `/cards/${id}/likes`, {\n      method: `${isLiked ? 'PUT' : 'DELETE'}`,\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-56',\n  headers: {\n    authorization: 'af3c3b2b-36c2-4b4e-b99e-3893cac6c5e1',\n    'Content-Type': 'application/json'\n  }\n});\nexport { api };","map":{"version":3,"names":["Api","constructor","options","_baseUrl","baseUrl","_headers","headers","_checkResponse","res","ok","json","Promise","reject","status","getUserInfo","fetch","method","then","getInitialCards","setUserInfoApi","name","about","body","JSON","stringify","addUserCard","data","link","deleteCard","id","changeUserAvatar","avatar","userAvatar","changeLikeCardStatus","isLiked","api","authorization"],"sources":["/Users/master/Desktop/Projects/YP/mesto-react/mesto-react/src/utils/Api.js"],"sourcesContent":["class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json()\n    }\n    return Promise.reject(`Ошибка: ${res.status}`)\n  }\n\n  getUserInfo() {\n    return fetch(this._baseUrl + '/users/me', {\n      method: 'GET',\n      headers: this._headers\n    })\n      .then(this._checkResponse)\n  }\n\n  getInitialCards() {\n    return fetch(this._baseUrl + '/cards', {\n      method: 'GET',\n      headers: this._headers\n    })\n    .then(this._checkResponse)\n  }\n\n  setUserInfoApi({name, about}) {\n    return fetch(this._baseUrl + '/users/me', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    })\n    .then(this._checkResponse)\n  }\n\n  addUserCard(data) {\n    return fetch(this._baseUrl + '/cards', {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    })\n    .then(this._checkResponse)\n  }\n\n  deleteCard(id) {\n    return fetch(this._baseUrl + `/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    })\n    .then(this._checkResponse)\n  }\n\n  changeUserAvatar(data) {\n    return fetch(this._baseUrl + `/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.userAvatar,\n      })\n    })\n    .then(this._checkResponse);\n  }\n\n  // addLike(id) {\n  //   return fetch(this._baseUrl + `/cards/${id}/likes`, {\n  //     method: 'PUT',\n  //     headers: this._headers\n  //   })\n  //   .then(this._checkResponse)\n  // }\n\n  // deleteLike(id) {\n  //   return fetch(this._baseUrl + `/cards/${id}/likes`, {\n  //     method: 'DELETE',\n  //     headers: this._headers\n  //   })\n  //   .then(this._checkResponse)\n  // }\n\n  changeLikeCardStatus(id, isLiked) {\n    return fetch(this._baseUrl + `/cards/${id}/likes`, {\n      method: `${isLiked ? 'PUT' : 'DELETE'}`,\n      headers: this._headers\n    })\n    .then(this._checkResponse)\n  }\n}\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-56',\n  headers: {\n    authorization: 'af3c3b2b-36c2-4b4e-b99e-3893cac6c5e1',\n    'Content-Type': 'application/json'\n  }\n})\n\nexport {api}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}